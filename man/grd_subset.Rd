% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/subset.R
\name{grd_subset}
\alias{grd_subset}
\alias{grd_subset_data}
\alias{grd_crop}
\alias{grd_crop.wk_grd_rct}
\alias{grd_crop.wk_grd_xy}
\alias{grd_extend}
\alias{grd_extend.wk_grd_rct}
\alias{grd_extend.wk_grd_xy}
\alias{grd_index}
\alias{grd_index_range}
\alias{grd_cell_bounds}
\alias{grd_cell_bounds.wk_grd_rct}
\alias{grd_cell_bounds.wk_grd_xy}
\alias{grd_cell_center}
\alias{grd_cell_center.wk_grd_rct}
\alias{grd_cell_center.wk_grd_xy}
\title{Subset grd grids}
\usage{
grd_subset(grid, i = NULL, j = NULL, ...)

grd_subset_data(grid_data, i = NULL, j = NULL, ...)

grd_crop(grid, bbox, ..., snap = list(ceiling, floor))

\method{grd_crop}{wk_grd_rct}(grid, bbox, ..., snap = grd_snap_previous)

\method{grd_crop}{wk_grd_xy}(grid, bbox, ..., snap = list(ceiling, floor))

grd_extend(grid, bbox, ..., snap = list(ceiling, floor))

\method{grd_extend}{wk_grd_rct}(grid, bbox, ..., snap = list(grd_snap_next, grd_snap_previous))

\method{grd_extend}{wk_grd_xy}(grid, bbox, ..., snap = list(ceiling, floor))

grd_index(grid, point, ..., snap = grd_snap_next)

grd_index_range(grid, bbox, ..., snap = grd_snap_next)

grd_cell_bounds(grid, i, j = NULL, ...)

\method{grd_cell_bounds}{wk_grd_rct}(grid, i, j = NULL, ..., out_of_bounds = "keep")

\method{grd_cell_bounds}{wk_grd_xy}(grid, i, j = NULL, ..., out_of_bounds = "keep")

grd_cell_center(grid, i, j = NULL, ...)

\method{grd_cell_center}{wk_grd_rct}(grid, i, j = NULL, ..., out_of_bounds = "keep")

\method{grd_cell_center}{wk_grd_xy}(grid, i, j = NULL, ..., out_of_bounds = "keep")
}
\arguments{
\item{grid}{A \code{\link[=grd_xy]{grd_xy()}}, \code{\link[=grd_rct]{grd_rct()}}, or other object
implementing \verb{grd_*()} methods.}

\item{i, j}{Raw indices. These must be equally
spaced if passed as numeric; if passed as logical they are
recycled silently along each dimension. Indexing grd grids
is always 1-based and always starts from the left and top of
the bounding box regardless of internal data ordering. A
\code{list()} containing \code{i} and \code{j} elements can also be supplied.}

\item{...}{Passed to subset methods}

\item{grid_data}{The \verb{$data} member of a \code{\link[=grd_xy]{grd_xy()}}, \code{\link[=grd_rct]{grd_rct()}},
or other object implementing \verb{grd_*()} methods.}

\item{bbox}{A bounding box to use as a subset. This is used
to calculate a suitable \code{y} and \code{x} index vector representing
all cells that intersect the \code{bbox}. Cells that only touch \code{bbox}
on the bottom and right are not included in the subset, meaning you
can safely tile a regularly-spaced grid along \code{grid} without
double-counting cells.}

\item{snap}{A function that transforms real-valued indices to integer
indices (e.g., \code{\link[=floor]{floor()}}, \code{\link[=ceiling]{ceiling()}}, or \code{\link[=round]{round()}}).
For \code{\link[=grd_index_range]{grd_index_range()}}, a \code{list()} with exactly two elements to be called
for the minimum and maximum index values, respectively.}

\item{point}{A \link[=wk_handle]{handleable} of points.}

\item{out_of_bounds}{One of 'keep', 'censor', 'discard', or 'squish'}
}
\value{
\itemize{
\item \code{grd_index()}: returns a \code{list(i, j)} of index values corresponding
to the input points and adjusted according to \code{snap}. Index values
will be outside \code{dim(grid)} for points outside \code{wk_bbox(grid)} including
negative values.
\item \code{grd_subset()}: A modified \code{\link[=grd]{grd()}}.
\item \code{grd_subset_indices()}: A \code{list()} with components
\code{i} (\code{c(start = , stop = , step = )}), \code{j} (\code{c(start = , stop = , step = )}),
and \code{bbox} (\code{\link[=rct]{rct()}} of length 1). In this value \code{start} is the index before
the first element and \code{stop} is the last element (equivalent to notation
for a zero-based Python slice).
}
}
\description{
The \code{\link[=grd_subset]{grd_subset()}} method handles the subsetting of a \code{\link[=grd]{grd()}}
in x-y space. Ordering of indices is not considered and logical
indies are recycled silently along dimensions. The result of
a \code{\link[=grd_subset]{grd_subset()}} is always a \code{\link[=grd]{grd()}} of the same type whose
relationship to x-y space has not changed.
}
\examples{
grid <- grd_rct(volcano)
grd_subset(grid, seq(2, 61, by = 4), seq(2, 87, by = 4))

}
